// Input validation utilities with helpful error messages

export interface ValidationResult {
  isValid: boolean;
  error?: string;
}

// Amount validation
export function validateAmount(value: string): ValidationResult {
  if (!value || value.trim() === '') {
    return { isValid: false, error: 'Amount is required' };
  }

  const trimmed = value.trim();
  
  // Check if it's a valid number
  const num = parseFloat(trimmed);
  
  if (isNaN(num)) {
    return { isValid: false, error: 'Please enter a valid number' };
  }

  if (num <= 0) {
    return { isValid: false, error: 'Amount must be greater than 0' };
  }

  if (num > 1000000) {
    return { isValid: false, error: 'Amount seems unreasonably large. Please verify.' };
  }

  // Check for too many decimal places (NEAR has yoctoNEAR precision, but for UX we limit to 6 decimals)
  const decimalPart = trimmed.split('.')[1];
  if (decimalPart && decimalPart.length > 6) {
    return { isValid: false, error: 'Maximum 6 decimal places allowed' };
  }

  return { isValid: true };
}

// Circle name validation
export function validateCircleName(name: string): ValidationResult {
  if (!name || name.trim() === '') {
    return { isValid: false, error: 'Circle name is required' };
  }

  const trimmed = name.trim();

  if (trimmed.length < 2) {
    return { isValid: false, error: 'Circle name must be at least 2 characters' };
  }

  if (trimmed.length > 100) {
    return { isValid: false, error: 'Circle name must be less than 100 characters' };
  }

  // Allow letters, numbers, spaces, and common punctuation
  const validPattern = /^[a-zA-Z0-9\s\-_'".!,&()]+$/;
  if (!validPattern.test(trimmed)) {
    return { isValid: false, error: 'Circle name contains invalid characters' };
  }

  return { isValid: true };
}

// Password validation
export function validatePassword(password: string, options?: { requireStrong?: boolean }): ValidationResult {
  if (!password || password.trim() === '') {
    return { isValid: false, error: 'Password is required' };
  }

  if (password.length < 6) {
    return { isValid: false, error: 'Password must be at least 6 characters' };
  }

  if (password.length > 128) {
    return { isValid: false, error: 'Password is too long' };
  }

  // Optional: Require strong password
  if (options?.requireStrong) {
    const hasLetter = /[a-zA-Z]/.test(password);
    const hasNumber = /[0-9]/.test(password);
    
    if (!hasLetter || !hasNumber) {
      return { 
        isValid: false, 
        error: 'Password must contain both letters and numbers for security' 
      };
    }
  }

  return { isValid: true };
}

// Memo/description validation
export function validateMemo(memo: string): ValidationResult {
  if (!memo || memo.trim() === '') {
    return { isValid: false, error: 'Description is required' };
  }

  const trimmed = memo.trim();

  if (trimmed.length < 3) {
    return { isValid: false, error: 'Description must be at least 3 characters' };
  }

  if (trimmed.length > 500) {
    return { isValid: false, error: 'Description must be less than 500 characters' };
  }

  return { isValid: true };
}

// Circle ID validation
export function validateCircleId(circleId: string): ValidationResult {
  if (!circleId || circleId.trim() === '') {
    return { isValid: false, error: 'Circle ID is required' };
  }

  const trimmed = circleId.trim();

  // Circle IDs should be alphanumeric (generated by contract)
  const validPattern = /^[a-zA-Z0-9_-]+$/;
  if (!validPattern.test(trimmed)) {
    return { isValid: false, error: 'Invalid Circle ID format' };
  }

  return { isValid: true };
}

// Account ID validation (NEAR account format)
export function validateAccountId(accountId: string): ValidationResult {
  if (!accountId || accountId.trim() === '') {
    return { isValid: false, error: 'Account ID is required' };
  }

  const trimmed = accountId.trim();

  // NEAR account IDs: lowercase, numbers, hyphens, dots, 2-64 chars
  const validPattern = /^[a-z0-9._-]{2,64}$/;
  if (!validPattern.test(trimmed)) {
    return { 
      isValid: false, 
      error: 'Invalid NEAR account ID (use lowercase, numbers, dots, hyphens)' 
    };
  }

  return { isValid: true };
}

// Generic required field validation
export function validateRequired(value: string, fieldName: string = 'This field'): ValidationResult {
  if (!value || value.trim() === '') {
    return { isValid: false, error: `${fieldName} is required` };
  }
  return { isValid: true };
}

// Sanitize user input (remove potentially dangerous characters)
export function sanitizeInput(input: string): string {
  return input
    .trim()
    .replace(/[<>]/g, '') // Remove angle brackets
    .replace(/javascript:/gi, '') // Remove javascript: protocol
    .replace(/on\w+=/gi, ''); // Remove inline event handlers
}

// Safe number parsing with fallback
export function parseNumericInput(value: string, fallback: number = 0): number {
  const num = parseFloat(value);
  return isNaN(num) ? fallback : num;
}

// Format validation errors for display
export function formatValidationErrors(errors: Record<string, string>): string[] {
  return Object.values(errors).filter(Boolean);
}
